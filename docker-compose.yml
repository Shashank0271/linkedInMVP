version: "3.9"

services:

  kafka:
    image: docker.io/bitnami/kafka:3.8
    container_name: kafka
    volumes:
      - "kafka_data:/bitnami"
    networks:
      - linkedin-network
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - linkedin-network

  discovery-service:
    container_name: "discovery-server"
    ports:
      - "8761:8761"
    build:
      context: discovery-server/
    networks:
      - linkedin-network

  config-server:
    container_name: "config-server"
    build:
      context: config-server/
    networks:
      - linkedin-network
    depends_on:
      - discovery-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  api-gateway:
    container_name: "api-gateway"
    build:
      context: api-gateway/
    networks:
      - linkedin-network
    depends_on:
      config-server:
        condition: service_healthy
    ports:
      - "8086:8086"

  user-service:
    container_name: "user-service"
    build:
      context: user-service/
    networks:
      - linkedin-network
    depends_on:
      kafka:
        condition: service_started
      user-db:
        condition: service_started
      config-server:
        condition: service_healthy

  posts-service:
    container_name: "posts-service"
    build:
      context: posts-service/
    networks:
      - linkedin-network
    depends_on:
      posts-db:
        condition: service_started
      kafka:
        condition: service_healthy
      config-server:
        condition: service_healthy

  connection-service:
    container_name: "connection-service"
    build:
      context: connection-service/
    networks:
      - linkedin-network
    depends_on:
      connections-db:
        condition: service_started
      config-server:
        condition: service_healthy

  notification-service:
    container_name: "notification-service"
    build:
      context: notification-service/
    networks:
      - linkedin-network
    depends_on:
      notification-db:
        condition: service_started
      kafka:
        condition: service_started
      config-server:
        condition: service_healthy

  user-db:
    container_name: "user_db"
    image : "postgres"
    environment:
      POSTGRES_PASSWORD: "shashank"
      POSTGRES_USER: "shashank"
      POSTGRES_DB: "linkedin"
    networks:
      - linkedin-network

  posts-db:
    container_name: "posts_db"
    image : "postgres"
    environment:
      POSTGRES_PASSWORD: "shashank"
      POSTGRES_USER: "shashank"
      POSTGRES_DB: "linkedin"
    networks:
      - linkedin-network

  notification-db:
    container_name: "notification_db"
    image: "postgres"
    environment:
      POSTGRES_PASSWORD: "shashank"
      POSTGRES_USER: "shashank"
      POSTGRES_DB: "linkedin"
    networks:
      - linkedin-network

  connections-db:
    image: neo4j
    container_name: connections-db
    environment:
      - NEO4J_AUTH=neo4j/password  # Set your username and password
    ports:
      - "7474:7474"  # HTTP port
      - "7687:7687"  # Bolt port
    volumes:
      - connections-db-data:/data
    networks:
      - linkedin-network

networks:
  linkedin-network:

volumes:
  connections-db-data:
  kafka_data:


